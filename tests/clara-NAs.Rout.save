
R : Copyright 2004, The R Foundation for Statistical Computing
Version 1.9.0 alpha (2004-03-11), ISBN 3-900051-00-3

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

> if(FALSE)
+     library(cluster, lib.loc="/u/maechler/R/Pkgs/cluster.Rcheck")
> library(cluster)
> 
> x <- cbind(c(0, -4, -22, -14, 0, NA, -28, 1, 10, -1,
+              100 + c(13, 0, 2, 4, 7, 8, 1)),
+            c(-5, -14, NA, -35, -30, NA, 7, 2, -18, 13,
+              47, 64, 48, NA, NA, 44, 65))
> x
      [,1] [,2]
 [1,]    0   -5
 [2,]   -4  -14
 [3,]  -22   NA
 [4,]  -14  -35
 [5,]    0  -30
 [6,]   NA   NA
 [7,]  -28    7
 [8,]    1    2
 [9,]   10  -18
[10,]   -1   13
[11,]  113   47
[12,]  100   64
[13,]  102   48
[14,]  104   NA
[15,]  107   NA
[16,]  108   44
[17,]  101   65
> (d <- dist(x,'manhattan'))
     1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
2   13                                                            
3   44  36                                                        
4   44  31  16                                                    
5   25  20  44  19                                                
6   NA  NA  NA  NA  NA                                            
7   40  45  12  56  65  NA                                        
8    8  21  46  52  33  NA  34                                    
9   23  18  64  41  22  NA  63  29                                
10  19  30  42  61  44  NA  33  13  42                            
11 165 178 270 209 190  NA 181 157 168 148                        
12 169 182 244 213 194  NA 185 161 172 152  30                    
13 155 168 248 199 180  NA 171 147 158 138  12  18                
14 208 216 252 236 208  NA 264 206 188 210  18   8   4            
15 214 222 258 242 214  NA 270 212 194 216  12  14  10   6        
16 157 170 260 201 182  NA 173 149 160 140   8  28  10   8   2    
17 171 184 246 215 196  NA 187 163 174 154  30   2  18   6  12  28
> summary(d, na.rm = TRUE) # max = 270
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
   2.00   27.25  147.50  114.60  188.50  270.00   16.00 
> ## First call with "trace" (seg.fault typically later ...):
> try( clara(x, k=2, metric="manhattan", sampsize=10, trace = 3) )
calling .C("clara", *):
C clara(): (nsam,n) = (10,17); 'large_sample',
C clara(): sample 1  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 1 
 {295} [ntt=7, nunfs=0] .. nsel[1:10]= 6 7 8 9 10 12 13 14 16 17  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 2  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 3 
 {295} [ntt=7, nunfs=1] .. nsel[1:10]= 1 4 7 9 11 12 13 15 16 17  -> dysta2()
. clara(): s:= max dys[l=45] = 270; selec() -> 'NAfs'
C clara(): sample 3  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 6 
 {295} [ntt=7, nunfs=2] .. nsel[1:10]= 1 2 3 5 8 9 10 11 13 17  -> dysta2()
. clara(): s:= max dys[l=45] = 270; selec() -> 'NAfs'
C clara(): sample 4  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 5 
 {295} [ntt=7, nunfs=3] .. nsel[1:10]= 1 2 3 4 7 8 9 10 13 14  -> dysta2()
. clara(): s:= max dys[l=45] = 264; selec() -> 'NAfs'
C clara(): sample 5  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 16 
 {295} [ntt=7, nunfs=4] .. nsel[1:10]= 2 3 4 6 7 8 9 10 11 17  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
Error in clara(x, k = 2, metric = "manhattan", sampsize = 10, trace = 3) : 
	Observation 6 has *only* NAs --> omit for clustering
> ## Originally:already shows the problem:  nbest[] = c(0,0,...,0) must be WRONG!!
> ## Now: gives the proper error message.
> 
> ## S-plus 6.1.2 (rel.2 for Linux, 2002) gives
> ##> cc <- clara(x, k=2, metric="manhattan", samples=2, sampsize=10)
> ## Problem in .Fortran("clara",: Internal error: data for decrementing
> ## ref.count didn't point to a valid arena (0x0), while calling subroutine clara
> 
> ## The large example from  clara.R -- made small enough to still provoke
> ## the    "** dysta2() ...  OUT"  problem  {no longer!}
> x <- matrix(c(0, 3, -4, 62, 1, 3, -7, 45, 36, 46, 45, 54, -10,
+               51, 49, -5, 13, -6, 49, 52, 57, 39, -1, 55, 68, -3, 51, 11, NA,
+               9, -3, 50, NA, 58, 9, 52, 12, NA, 47, -12, -6, -9, 5, 30, 38,
+               54, -5, 39, 50, 50, 54, 43, 7, 64, 55, 4, 0, 72, 54, 37, 59,
+               -1, 8, 43, 50, -2, 56, -8, 43, 6, 4, 48, -2, 14, 45, 49, 56,
+               51, 45, 11, 10, 42, 50, 2, -12, 3, 1, 2, 2, -14, -4, 8, 0, 3,
+               -11, 8, 5, 14, -1, 9, 0, 19, 10, -2, -9, 9, 2, 16, 10, 4, 1,
+               12, 7, -4, 27, -8, -9, -9, 2, 8, NA, 13, -23, -3, -5, 1, 15,
+               -3, 5, -9, -5, 14, 8, 7, -4, 26, 20, 10, 8, 17, 4, 14, 23, -2,
+               23, 2, 16, 5, 5, -3, 12, 5, 14, -2, 4, 2, -2, 7, 9, 1, -15, -1,
+               9, 23, 1, 7, 13, 2, -11, 16, 12, -11, -14, 2, 6, -8),
+             ncol = 2)
> str(x) # 88 x 2
 num [1:88, 1:2] 0 3 -4 62 1 3 -7 45 36 46 ...
> try(clara(x, 2, samples = 20, trace = 3))# 2nd sample did show dysta2() problem
calling .C("clara", *):
C clara(): (nsam,n) = (44,88);
C clara(): sample 1  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 2 
 {295} [ntt=44, nunfs=0]  -> dysta2()
. clara(): s:= max dys[l=946] = 78.6448; selec() -> 'NAfs'
C clara(): sample 2  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 12 
 {295} [ntt=44, nunfs=1]  -> dysta2()
. clara(): s:= max dys[l=946] = 81.7435; selec() -> 'NAfs'
C clara(): sample 3  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 14 
 {295} [ntt=44, nunfs=2]  -> dysta2()
. clara(): s:= max dys[l=946] = 77.8781; selec() -> 'NAfs'
C clara(): sample 4  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 70 
 {295} [ntt=44, nunfs=3]  -> dysta2()
. clara(): s:= max dys[l=946] = 77.8781; selec() -> 'NAfs'
C clara(): sample 5  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 80 
 {295} [ntt=44, nunfs=4]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 6  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 5 
 {295} [ntt=44, nunfs=5]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 7  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 17 
 {295} [ntt=44, nunfs=6]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 8  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 67 
 {295} [ntt=44, nunfs=7]  -> dysta2()
. clara(): s:= max dys[l=946] = 85.5102; selec() -> 'NAfs'
C clara(): sample 9  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 67 
 {295} [ntt=44, nunfs=8]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 10  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 5 
 {295} [ntt=44, nunfs=9]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 11  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 66 
 {295} [ntt=44, nunfs=10]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 12  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 21 
 {295} [ntt=44, nunfs=11]  -> dysta2()
. clara(): s:= max dys[l=946] = 78.3135; selec() -> 'NAfs'
C clara(): sample 13  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 4 
 {295} [ntt=44, nunfs=12]  -> dysta2()
. clara(): s:= max dys[l=946] = 84.1487; selec() -> 'NAfs'
C clara(): sample 14  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 78 
 {295} [ntt=44, nunfs=13]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 15  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 73 
 {295} [ntt=44, nunfs=14]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 16  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 43 
 {295} [ntt=44, nunfs=15]  -> dysta2()
. clara(): s:= max dys[l=946] = 75.1665; selec() -> 'NAfs'
C clara(): sample 17  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 22 
 {295} [ntt=44, nunfs=16]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 18  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 39 
 {295} [ntt=44, nunfs=17]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 19  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 72 
 {295} [ntt=44, nunfs=18]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
C clara(): sample 20  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 48 
 {295} [ntt=44, nunfs=19]  -> dysta2()
  dysta2() gave dyst_toomany_NA --> new sample
Error in clara(x, 2, samples = 20, trace = 3) : 
	Observation 33 has *only* NAs --> omit for clustering
> ## To see error message for > 1 missing:
> try(clara(rbind(NA,x), 2))
Error in clara(rbind(NA, x), 2) : Observations  c(1,34)  have *only* NAs --> omit for clustering
> 
> x <- x[-33,]
> ## still had the ** dysta2() .. OUT" problem {no longer!}
> clara(x, 2, samples = 12, trace = 3)
calling .C("clara", *):
C clara(): (nsam,n) = (44,87); 'large_sample',
C clara(): sample 1  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 2 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 1 7 8 11 14 16 17 21 22 26 29 30 32 33 34 36 37 39 40 41 43 44 45 46 48 49 51 52 54 55 56 58 62 64 66 68 69 71 74 82 83 84 85 86  -> dysta2()
. clara(): s:= max dys[l=946] = 76.5376; 1st proper or new best: zb= 429.198
C clara(): sample 2  finding 1st... new k{ran}:
.. kall: T, 
... nrx [0:1]= 37 82 
... nsel[0:0]= 70 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 4 8 10 11 13 15 16 18 20 21 22 23 24 25 31 32 33 34 35 36 37 40 41 43 45 46 48 50 52 55 62 64 65 68 69 71 72 77 81 82 84 85 86 87  -> dysta2()
. clara(): s:= max dys[l=946] = 82.7103; zb= 429.198
C clara(): sample 3  finding 1st... new k{ran}:
.. kall: T, 
... nrx [0:1]= 37 82 
... nsel[0:0]= 38 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 2 5 10 11 14 18 21 22 23 24 25 26 27 29 33 34 36 37 39 41 42 43 45 47 49 50 55 57 58 60 62 64 67 68 71 73 75 77 79 82 83 84 85 87  -> dysta2()
. clara(): s:= max dys[l=946] = 85.5102; 1st proper or new best: zb= 417.868
C clara(): sample 4  finding 1st... new k{ran}:
.. kall: T, 
... nrx [0:1]= 37 64 
... nsel[0:0]= 85 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 2 4 5 6 8 10 11 12 15 18 21 24 25 26 28 31 33 37 40 42 43 47 49 50 52 54 55 57 58 59 60 61 62 63 64 71 72 73 74 78 79 81 82 86  -> dysta2()
. clara(): s:= max dys[l=946] = 78.3135; zb= 429.198
C clara(): sample 5  finding 1st... new k{ran}:
.. kall: T, 
... nrx [0:1]= 37 64 
... nsel[0:0]= 84 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 4 6 9 10 12 13 15 16 17 18 20 21 24 26 27 31 34 35 36 37 40 41 42 43 45 51 52 53 54 55 56 62 64 65 67 68 69 71 72 73 74 77 79 82  -> dysta2()
. clara(): s:= max dys[l=946] = 76.5376; zb= 429.198
C clara(): sample 6  finding 1st... new k{ran}:
.. kall: T, 
... nrx [0:1]= 37 64 
... nsel[0:0]= 33 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 1 5 7 9 11 13 14 15 17 18 22 26 27 28 34 35 36 37 38 43 46 47 48 50 51 54 55 56 57 61 63 64 66 69 71 73 74 75 76 77 78 80 81 82  -> dysta2()
. clara(): s:= max dys[l=946] = 82.0244; 1st proper or new best: zb= 417.273
C clara(): sample 7  finding 1st... new k{ran}:
.. kall: T, 
... nrx [0:1]= 37 38 
... nsel[0:0]= 26 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 1 3 4 5 9 10 11 18 19 21 23 24 25 30 37 38 39 40 46 47 50 54 55 56 59 62 65 66 67 68 70 71 72 74 75 76 79 80 81 82 83 84 85 86  -> dysta2()
. clara(): s:= max dys[l=946] = 82.7103; zb= 417.273
C clara(): sample 8  finding 1st... new k{ran}:
.. kall: T, 
... nrx [0:1]= 37 38 
... nsel[0:0]= 74 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 4 5 10 12 15 16 17 19 20 21 22 23 24 25 26 27 28 29 31 37 38 39 41 42 44 45 46 49 50 51 56 57 61 62 63 64 68 73 75 77 78 80 81 85  -> dysta2()
. clara(): s:= max dys[l=946] = 84.1487; zb= 417.868
C clara(): sample 9  finding 1st... new k{ran}:
.. kall: T, 
... nrx [0:1]= 37 38 
... nsel[0:0]= 67 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 1 3 5 9 11 13 17 22 23 25 29 31 32 34 37 38 40 42 43 44 47 49 53 55 56 58 62 63 66 68 69 70 71 72 73 74 75 76 78 81 82 84 85 86  -> dysta2()
. clara(): s:= max dys[l=946] = 82.7103; zb= 417.273
C clara(): sample 10  finding 1st... new k{ran}:
.. kall: T, 
... nrx [0:1]= 37 38 
... nsel[0:0]= 85 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 2 4 8 11 13 22 24 25 26 27 29 31 34 36 37 38 39 41 42 44 47 48 49 50 53 57 58 59 60 61 62 63 64 66 67 70 71 72 75 77 79 82 84 87  -> dysta2()
. clara(): s:= max dys[l=946] = 85.5102; zb= 417.868
C clara(): sample 11  finding 1st... new k{ran}:
.. kall: T, 
... nrx [0:1]= 37 38 
... nsel[0:0]= 87 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 2 7 8 9 10 12 16 17 20 22 23 24 26 27 29 34 35 36 37 38 41 44 47 48 49 50 51 52 53 54 59 60 61 63 67 68 69 75 76 78 80 81 84 85  -> dysta2()
. clara(): s:= max dys[l=946] = 80.9938; zb= 417.273
C clara(): sample 12  finding 1st... new k{ran}:
.. kall: T, 
... nrx [0:1]= 37 38 
... nsel[0:0]= 44 
 {295} [ntt=43, nunfs=0] .. nsel[1:44]= 1 2 3 7 11 12 14 18 19 20 21 24 28 30 31 32 33 34 37 38 39 40 42 49 51 52 53 55 59 63 68 69 70 72 74 76 77 78 79 81 84 85 86 87  -> dysta2()
. clara(): s:= max dys[l=946] = 80.9938; zb= 444.86
C clara(): best sample _found_ ; nbest[1:44] =
 c(1,5,7,9,11,13,14,15,17,18,22,26,27,28,34,35,36,37,38,43,46,47,48,50,51,54,55,56,57,61,63,64,66,69,71,73,74,75,76,77,78,80,81,82)
 --> dysta2(nbest), resul(), end
Call:	 clara(x = x, k = 2, samples = 12, trace = 3) 
Medoids:
     [,1] [,2]
[1,]   NA    1
[2,]   47   15
Objective function:	 4.79624
Clustering vector: 	 int [1:87] 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 ...
Cluster sizes:	    	 74 13 
Best sample:
 [1]  1  5  7  9 11 13 14 15 17 18 22 26 27 28 34 35 36 37 38 43 46 47 48 50 51
[26] 54 55 56 57 61 63 64 66 69 71 73 74 75 76 77 78 80 81 82

Available components:
[1] "sample"     "medoids"    "clustering" "objective"  "clusinfo"  
[6] "diss"       "call"       "silinfo"    "data"      
> 
